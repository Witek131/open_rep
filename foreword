CSS DISPLAY AND POSITIONING

1. FLOW OF HTML

    A browser will render the elements of an HTML document that has no CSS from left to right, 
    top to bottom, in the same order as they exist in the document. This is called the flow of elements in HTML.

    In addition to the properties that it provides to style HTML elements, CSS includes properties 
    that change how a browser positions elements. These properties specify where an element is located on a page, 
    if the element can share lines with other elements, and other related attributes.

2. POSITION

    <div class="boxes"></div>
    <div class="boxes"></div>

    .boxes {
        width: 120px;
        height: 70px;
    }

    Block-level elements https://s3.amazonaws.com/codecademy-content/courses/web-101/unit-7/alex-clark-experiment/static.png

    Block-level elements like these boxes create a block the full width of their parent elements, 
    and they prevent other elements from appearing in the same horizontal space.

    The default position of an element can be changed by setting its position property. 
    The position property can take one of four values:

    1)  static - the default value (it does not need to be specified)
    2)  relative
    3)  absolute
    4)  fixed

3.  POSITION: RELATIVE

    This value allows you to position an element relative to its default static position on the web page.

    -   top - moves the element down.
    -   bottom - moves the element up.
    -   left - moves the element right.
    -   right - moves the element left.

    .box-bottom {
        background-color: DeepSkyBlue;
        position: relative;
        top: 20px;
        left: 50px;
    }

    https://s3.amazonaws.com/codecademy-content/courses/web-101/unit-7/alex-clark-experiment/relative.png

    Offset properties will not work if the value of the element’s position property is the default static!
  
    1.  In style.css, set the position in .question to relative.
    2.  Next, offset .question 40 pixels from the top (again, in style.css).

4.  POSITION: ABSOLUTE

    When an element’s position is set to absolute all other elements on the page will ignore the element 
    and act like it is not present on the page. 

    .box-bottom {
        background-color: DeepSkyBlue;
        position: absolute;
        top: 20px;
        left: 50px;
    }

    https://s3.amazonaws.com/codecademy-content/courses/web-101/unit-7/alex-clark-experiment/absolute.gif

    The bottom box in this image (colored blue) is displaced from the top left corner of its container. 
    It is 20 pixels lower and 50 pixels to the right of the top box.

    1.  In style.css, set the position inside of the header selector to absolute. Scroll up and down the web page. What do you notice?

5.    POSITION: FIXED

    The element will scroll with the rest of the document when a user scrolls.
    We can fix an element to a specific position on the page (regardless of user scrolling) by setting its position to fixed.

    .box-bottom {
        background-color: DeepSkyBlue;
        position: fixed;
        top: 20px;
        left: 50px;
    }   

    https://s3.amazonaws.com/codecademy-content/courses/web-1
    01/unit-7/alex-clark-experiment/fixed.gif

    This technique is often used for navigation bars on a web page.

    1.  In style.css, change the position inside of the header rule to fixed. 
    Scroll up and down the web page. What do you notice?

    2.  Notice that part of the “Welcome” section is now covered up by the header. 
        That’s because when we changed the position of the header to fixed, we removed it from the flow of the html document. 
        Let’s fix that. Change the position of the .welcome element to relative.

    3.  Offset the “Welcome” section by 200 pixels from the top. Everything might not be displaying correctly just yet.

6.      Z-index

    When boxes on a web page have a combination of different positions, the boxes (and therefore, their content) 
    can overlap with each other, making the content difficult to read or consume.

    The z-index property controls how far “back” or how far “forward” an element should appear on the web page when elements overlap. 
    This can be thought of the depth of elements, with deeper elements appearing behind shallower elements.

    The z-index property accepts integer values. Depending on their values, the integers instruct the browser on the order 
    in which elements should be displayed on the web page.

    1.  In style.css, set the z-index of the header to 10. Notice how the header is no longer covered by other elements when you scroll!

7.    INLINE DISPLAY

    Every HTML element has a default display value that dictates if it can share horizontal space with other elements. 
    Some elements fill the entire browser from left to right regardless of the size of their content. 
    Other elements only take up as much horizontal space as their content requires and can be directly next to other elements.

    The default display for some tags, such as <em>, <strong>, and <a>, is called inline. 
    Inline elements have a box that wraps tightly around their content, only taking up the amount of space necessary 
    to display their content and not requiring a new line after each element. The height and width of these elements cannot be 
    specified in the CSS document. For example, the text of an anchor tag (<a>) will, by default, be displayed on 
    the same line as the surrounding text, and it will only be as wide as necessary to contain its content. 
    inline elements cannot be altered in size with the height or width CSS properties.

    The CSS display property provides the ability to make any element an inline element. 
    This includes elements that are not inline by default such as paragraphs, divs, and headings.

    h1 {
        display: inline;
    }

    The CSS in the example above will change the display of all <h1> elements to inline. 
    The browser will render <h1> elements on the same line as other inline elements immediately before or after them (if there are any).

    1.  In index.html, add opening and closing <strong></strong> tags around “Welcome.” Notice that the element does not move. 
        That’s because <strong> elements are inline, so they can share lines with other elements.

8.  BLOCK DISPLAY

    Some elements are not displayed in the same line as the content around them. These are called block-level elements. 
    These elements fill the entire width of the page by default, but their width property can also be set. 
    Unless otherwise specified, they are the height necessary to accommodate their content.

    1.  In index.html, add a <footer> element at the bottom of the document, right above the closing body tag.
    
    2.  Nothing changed! That’s because the <footer> element is empty. Add an <h3> element inside of the footer that says 
            “Thanks for taking our survey!”
    
    3.  To improve the appearance of the web page, set the height of the footer to 100 pixels in style.css.

9.  INLINE-BLOCK DISPLAY

    Inline-block elements can appear next to each other and we can specify their dimensions using the width and height properties. 
    Images are the best example of default inline-block elements.

    For example, <div>s in the CSS below will be displayed on the same line and with the specified dimensions:

    <div class="rectangle">
        <p>I’m a rectangle!</p>
    </div>
    <div class="rectangle">
        <p>So am I!</p>
    </div>
    <div class="rectangle">
        <p>Me three!</p>
    </div>

    .rectangle {
        display: inline-block;
        width: 200px;
        height: 300px;
    }

    In the example above, there are three rectangular divs that each contain a paragraph of text. 
    The .rectangle <div>s will all appear inline (provided there is enough space from left to right) 
    with a width of 200 pixels and height of 300 pixels, even though the text inside of them may not require 
    200 pixels by 300 pixels of space.

    1.  Let’s fix the display of the <li> tags in the menu at the top of the page.
        Set the display property of li elements to inline-block.

    2.  Set the width of the li elements to 80 pixels.

    3.  Now, we can reduce the top offset of the “Welcome” section. Set it to 50 pixels.

    4.  Set the display property of .answer elements to inline-block.

10. FLOAT

    So far, you’ve learned how to specify the exact position of an element using offset properties. 
    If you’re simply interested in moving an element as far left or as far right as possible on the page, 
    you can use the float property.

    The float property can be set to one of two values:

    -   left - this value will move, or float, elements as far left as possible.
    -   right - this value will move elements as far right as possible.

    .boxes {
        width: 120px;
        height: 70px;
    }

    .box-bottom {
        background-color: DeepSkyBlue;
        float: right;
    }
    
    In the example above, we float the .box-bottom element to the right. This works for static and relative positioned elements

    https://s3.amazonaws.com/codecademy-content/courses/web-101/unit-7/alex-clark-experiment/float-right.png

    1.  Set the float property of the .answer element to left.

11. CLEAR

    1.  Take a look at the .answer divs on the web page. They have been floated to the left, 
            but the .question divs are touching the .answer divs on the right, let’s fix this.

        In the .question selector, set the clear property to left. Notice how the questions moved.

    2.  On second thought, this layout is not looking so good. Remove the float property from .answer 
            and the clear property from .question.